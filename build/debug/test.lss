
build/debug/test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000088c  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800094c  0800094c  0000194c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800098c  0800098c  0000200c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800098c  0800098c  0000200c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800098c  0800098c  0000200c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800098c  0800098c  0000198c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000990  08000990  00001990  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08000994  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  080009a0  0000200c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  080009a0  0000202c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000200c  2**0
                  CONTENTS, READONLY
 12 .comment      0000001e  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY
 13 .debug_info   000031eb  00000000  00000000  00002052  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000112a  00000000  00000000  0000523d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000408  00000000  00000000  00006368  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000002d0  00000000  00000000  00006770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002689  00000000  00000000  00006a40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00001470  00000000  00000000  000090c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_frame  0000074c  00000000  00000000  0000a53c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_loclists 00000c36  00000000  00000000  0000ac88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000dc  00000000  00000000  0000b8be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__udivsi3>:
 80000c0:	2900      	cmp	r1, #0
 80000c2:	d034      	beq.n	800012e <.udivsi3_skip_div0_test+0x6a>

080000c4 <.udivsi3_skip_div0_test>:
 80000c4:	2301      	movs	r3, #1
 80000c6:	2200      	movs	r2, #0
 80000c8:	b410      	push	{r4}
 80000ca:	4288      	cmp	r0, r1
 80000cc:	d32c      	bcc.n	8000128 <.udivsi3_skip_div0_test+0x64>
 80000ce:	2401      	movs	r4, #1
 80000d0:	0724      	lsls	r4, r4, #28
 80000d2:	42a1      	cmp	r1, r4
 80000d4:	d204      	bcs.n	80000e0 <.udivsi3_skip_div0_test+0x1c>
 80000d6:	4281      	cmp	r1, r0
 80000d8:	d202      	bcs.n	80000e0 <.udivsi3_skip_div0_test+0x1c>
 80000da:	0109      	lsls	r1, r1, #4
 80000dc:	011b      	lsls	r3, r3, #4
 80000de:	e7f8      	b.n	80000d2 <.udivsi3_skip_div0_test+0xe>
 80000e0:	00e4      	lsls	r4, r4, #3
 80000e2:	42a1      	cmp	r1, r4
 80000e4:	d204      	bcs.n	80000f0 <.udivsi3_skip_div0_test+0x2c>
 80000e6:	4281      	cmp	r1, r0
 80000e8:	d202      	bcs.n	80000f0 <.udivsi3_skip_div0_test+0x2c>
 80000ea:	0049      	lsls	r1, r1, #1
 80000ec:	005b      	lsls	r3, r3, #1
 80000ee:	e7f8      	b.n	80000e2 <.udivsi3_skip_div0_test+0x1e>
 80000f0:	4288      	cmp	r0, r1
 80000f2:	d301      	bcc.n	80000f8 <.udivsi3_skip_div0_test+0x34>
 80000f4:	1a40      	subs	r0, r0, r1
 80000f6:	431a      	orrs	r2, r3
 80000f8:	084c      	lsrs	r4, r1, #1
 80000fa:	42a0      	cmp	r0, r4
 80000fc:	d302      	bcc.n	8000104 <.udivsi3_skip_div0_test+0x40>
 80000fe:	1b00      	subs	r0, r0, r4
 8000100:	085c      	lsrs	r4, r3, #1
 8000102:	4322      	orrs	r2, r4
 8000104:	088c      	lsrs	r4, r1, #2
 8000106:	42a0      	cmp	r0, r4
 8000108:	d302      	bcc.n	8000110 <.udivsi3_skip_div0_test+0x4c>
 800010a:	1b00      	subs	r0, r0, r4
 800010c:	089c      	lsrs	r4, r3, #2
 800010e:	4322      	orrs	r2, r4
 8000110:	08cc      	lsrs	r4, r1, #3
 8000112:	42a0      	cmp	r0, r4
 8000114:	d302      	bcc.n	800011c <.udivsi3_skip_div0_test+0x58>
 8000116:	1b00      	subs	r0, r0, r4
 8000118:	08dc      	lsrs	r4, r3, #3
 800011a:	4322      	orrs	r2, r4
 800011c:	2800      	cmp	r0, #0
 800011e:	d003      	beq.n	8000128 <.udivsi3_skip_div0_test+0x64>
 8000120:	091b      	lsrs	r3, r3, #4
 8000122:	d001      	beq.n	8000128 <.udivsi3_skip_div0_test+0x64>
 8000124:	0909      	lsrs	r1, r1, #4
 8000126:	e7e3      	b.n	80000f0 <.udivsi3_skip_div0_test+0x2c>
 8000128:	0010      	movs	r0, r2
 800012a:	bc10      	pop	{r4}
 800012c:	4770      	bx	lr
 800012e:	b501      	push	{r0, lr}
 8000130:	2000      	movs	r0, #0
 8000132:	f000 f80b 	bl	800014c <__aeabi_idiv0>
 8000136:	bd02      	pop	{r1, pc}

08000138 <__aeabi_uidivmod>:
 8000138:	2900      	cmp	r1, #0
 800013a:	d0f8      	beq.n	800012e <.udivsi3_skip_div0_test+0x6a>
 800013c:	b503      	push	{r0, r1, lr}
 800013e:	f7ff ffc1 	bl	80000c4 <.udivsi3_skip_div0_test>
 8000142:	bc0e      	pop	{r1, r2, r3}
 8000144:	4342      	muls	r2, r0
 8000146:	1a89      	subs	r1, r1, r2
 8000148:	4718      	bx	r3
 800014a:	46c0      	nop			@ (mov r8, r8)

0800014c <__aeabi_idiv0>:
 800014c:	4770      	bx	lr
 800014e:	46c0      	nop			@ (mov r8, r8)

08000150 <__do_global_dtors_aux>:
 8000150:	b510      	push	{r4, lr}
 8000152:	4c06      	ldr	r4, [pc, #24]	@ (800016c <__do_global_dtors_aux+0x1c>)
 8000154:	7823      	ldrb	r3, [r4, #0]
 8000156:	2b00      	cmp	r3, #0
 8000158:	d107      	bne.n	800016a <__do_global_dtors_aux+0x1a>
 800015a:	4b05      	ldr	r3, [pc, #20]	@ (8000170 <__do_global_dtors_aux+0x20>)
 800015c:	2b00      	cmp	r3, #0
 800015e:	d002      	beq.n	8000166 <__do_global_dtors_aux+0x16>
 8000160:	4804      	ldr	r0, [pc, #16]	@ (8000174 <__do_global_dtors_aux+0x24>)
 8000162:	e000      	b.n	8000166 <__do_global_dtors_aux+0x16>
 8000164:	bf00      	nop
 8000166:	2301      	movs	r3, #1
 8000168:	7023      	strb	r3, [r4, #0]
 800016a:	bd10      	pop	{r4, pc}
 800016c:	2000000c 	.word	0x2000000c
 8000170:	00000000 	.word	0x00000000
 8000174:	08000934 	.word	0x08000934

08000178 <frame_dummy>:
 8000178:	4b04      	ldr	r3, [pc, #16]	@ (800018c <frame_dummy+0x14>)
 800017a:	b510      	push	{r4, lr}
 800017c:	2b00      	cmp	r3, #0
 800017e:	d003      	beq.n	8000188 <frame_dummy+0x10>
 8000180:	4903      	ldr	r1, [pc, #12]	@ (8000190 <frame_dummy+0x18>)
 8000182:	4804      	ldr	r0, [pc, #16]	@ (8000194 <frame_dummy+0x1c>)
 8000184:	e000      	b.n	8000188 <frame_dummy+0x10>
 8000186:	bf00      	nop
 8000188:	bd10      	pop	{r4, pc}
 800018a:	46c0      	nop			@ (mov r8, r8)
 800018c:	00000000 	.word	0x00000000
 8000190:	20000010 	.word	0x20000010
 8000194:	08000934 	.word	0x08000934

08000198 <Error_Handler>:
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000198:	b672      	cpsid	i
void Error_Handler(void) {
        /* USER CODE BEGIN Error_Handler_Debug */
        /* User can add his own implementation to report the HAL error return
         * state */
        __disable_irq();
        while (1) {
 800019a:	e7fe      	b.n	800019a <Error_Handler+0x2>

0800019c <SystemClock_Config>:
void SystemClock_Config(void) {
 800019c:	b510      	push	{r4, lr}
 800019e:	b08c      	sub	sp, #48	@ 0x30
        RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001a0:	ac05      	add	r4, sp, #20
 80001a2:	221c      	movs	r2, #28
 80001a4:	2100      	movs	r1, #0
 80001a6:	0020      	movs	r0, r4
 80001a8:	f000 fb97 	bl	80008da <memset>
        RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001ac:	2214      	movs	r2, #20
 80001ae:	2100      	movs	r1, #0
 80001b0:	4668      	mov	r0, sp
 80001b2:	f000 fb92 	bl	80008da <memset>
        __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_0);
 80001b6:	4a13      	ldr	r2, [pc, #76]	@ (8000204 <SystemClock_Config+0x68>)
 80001b8:	6813      	ldr	r3, [r2, #0]
 80001ba:	2107      	movs	r1, #7
 80001bc:	438b      	bics	r3, r1
 80001be:	6013      	str	r3, [r2, #0]
        RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001c0:	2302      	movs	r3, #2
 80001c2:	9305      	str	r3, [sp, #20]
        RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001c4:	33fe      	adds	r3, #254	@ 0xfe
 80001c6:	9308      	str	r3, [sp, #32]
        RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV4;
 80001c8:	2380      	movs	r3, #128	@ 0x80
 80001ca:	015b      	lsls	r3, r3, #5
 80001cc:	9309      	str	r3, [sp, #36]	@ 0x24
        RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001ce:	2340      	movs	r3, #64	@ 0x40
 80001d0:	930a      	str	r3, [sp, #40]	@ 0x28
        if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80001d2:	0020      	movs	r0, r4
 80001d4:	f000 f8f8 	bl	80003c8 <HAL_RCC_OscConfig>
 80001d8:	2800      	cmp	r0, #0
 80001da:	d10e      	bne.n	80001fa <SystemClock_Config+0x5e>
        RCC_ClkInitStruct.ClockType =
 80001dc:	4668      	mov	r0, sp
 80001de:	2307      	movs	r3, #7
 80001e0:	9300      	str	r3, [sp, #0]
        RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80001e2:	2300      	movs	r3, #0
 80001e4:	9301      	str	r3, [sp, #4]
        RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80001e6:	9302      	str	r3, [sp, #8]
        RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80001e8:	9303      	str	r3, [sp, #12]
        RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80001ea:	9304      	str	r3, [sp, #16]
        if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) !=
 80001ec:	2100      	movs	r1, #0
 80001ee:	f000 fa79 	bl	80006e4 <HAL_RCC_ClockConfig>
 80001f2:	2800      	cmp	r0, #0
 80001f4:	d103      	bne.n	80001fe <SystemClock_Config+0x62>
}
 80001f6:	b00c      	add	sp, #48	@ 0x30
 80001f8:	bd10      	pop	{r4, pc}
                Error_Handler();
 80001fa:	f7ff ffcd 	bl	8000198 <Error_Handler>
                Error_Handler();
 80001fe:	f7ff ffcb 	bl	8000198 <Error_Handler>
 8000202:	46c0      	nop			@ (mov r8, r8)
 8000204:	40022000 	.word	0x40022000

08000208 <main>:
int main(void) {
 8000208:	b510      	push	{r4, lr}
        HAL_Init();
 800020a:	f000 f839 	bl	8000280 <HAL_Init>
        SystemClock_Config();
 800020e:	f7ff ffc5 	bl	800019c <SystemClock_Config>
                HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000212:	20a0      	movs	r0, #160	@ 0xa0
 8000214:	2120      	movs	r1, #32
 8000216:	05c0      	lsls	r0, r0, #23
 8000218:	f000 f8b6 	bl	8000388 <HAL_GPIO_TogglePin>
                HAL_Delay(1000);
 800021c:	20fa      	movs	r0, #250	@ 0xfa
 800021e:	0080      	lsls	r0, r0, #2
 8000220:	f000 f84c 	bl	80002bc <HAL_Delay>
        while (1) {
 8000224:	e7f5      	b.n	8000212 <main+0xa>
	...

08000228 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000228:	b510      	push	{r4, lr}
 800022a:	0004      	movs	r4, r0
  HAL_StatusTypeDef  status = HAL_OK;

  if ((uint32_t)uwTickFreq != 0UL)
 800022c:	4b11      	ldr	r3, [pc, #68]	@ (8000274 <HAL_InitTick+0x4c>)
 800022e:	7819      	ldrb	r1, [r3, #0]
 8000230:	2900      	cmp	r1, #0
 8000232:	d101      	bne.n	8000238 <HAL_InitTick+0x10>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8000234:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8000236:	bd10      	pop	{r4, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8000238:	20fa      	movs	r0, #250	@ 0xfa
 800023a:	0080      	lsls	r0, r0, #2
 800023c:	f7ff ff40 	bl	80000c0 <__udivsi3>
 8000240:	0001      	movs	r1, r0
 8000242:	4b0d      	ldr	r3, [pc, #52]	@ (8000278 <HAL_InitTick+0x50>)
 8000244:	6818      	ldr	r0, [r3, #0]
 8000246:	f7ff ff3b 	bl	80000c0 <__udivsi3>
 800024a:	f000 f899 	bl	8000380 <HAL_SYSTICK_Config>
 800024e:	2800      	cmp	r0, #0
 8000250:	d10d      	bne.n	800026e <HAL_InitTick+0x46>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000252:	2c03      	cmp	r4, #3
 8000254:	d901      	bls.n	800025a <HAL_InitTick+0x32>
        status = HAL_ERROR;
 8000256:	2001      	movs	r0, #1
 8000258:	e7ed      	b.n	8000236 <HAL_InitTick+0xe>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800025a:	3001      	adds	r0, #1
 800025c:	2200      	movs	r2, #0
 800025e:	0021      	movs	r1, r4
 8000260:	4240      	negs	r0, r0
 8000262:	f000 f889 	bl	8000378 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000266:	4b05      	ldr	r3, [pc, #20]	@ (800027c <HAL_InitTick+0x54>)
 8000268:	601c      	str	r4, [r3, #0]
  HAL_StatusTypeDef  status = HAL_OK;
 800026a:	2000      	movs	r0, #0
 800026c:	e7e3      	b.n	8000236 <HAL_InitTick+0xe>
      status = HAL_ERROR;
 800026e:	2001      	movs	r0, #1
 8000270:	e7e1      	b.n	8000236 <HAL_InitTick+0xe>
 8000272:	46c0      	nop			@ (mov r8, r8)
 8000274:	20000000 	.word	0x20000000
 8000278:	20000008 	.word	0x20000008
 800027c:	20000004 	.word	0x20000004

08000280 <HAL_Init>:
{
 8000280:	b510      	push	{r4, lr}
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000282:	2003      	movs	r0, #3
 8000284:	f7ff ffd0 	bl	8000228 <HAL_InitTick>
 8000288:	1e04      	subs	r4, r0, #0
 800028a:	d002      	beq.n	8000292 <HAL_Init+0x12>
    status = HAL_ERROR;
 800028c:	2401      	movs	r4, #1
}
 800028e:	0020      	movs	r0, r4
 8000290:	bd10      	pop	{r4, pc}
    HAL_MspInit();
 8000292:	f000 f881 	bl	8000398 <HAL_MspInit>
 8000296:	e7fa      	b.n	800028e <HAL_Init+0xe>

08000298 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8000298:	4b03      	ldr	r3, [pc, #12]	@ (80002a8 <HAL_IncTick+0x10>)
 800029a:	781b      	ldrb	r3, [r3, #0]
 800029c:	4a03      	ldr	r2, [pc, #12]	@ (80002ac <HAL_IncTick+0x14>)
 800029e:	6811      	ldr	r1, [r2, #0]
 80002a0:	185b      	adds	r3, r3, r1
 80002a2:	6013      	str	r3, [r2, #0]
}
 80002a4:	4770      	bx	lr
 80002a6:	46c0      	nop			@ (mov r8, r8)
 80002a8:	20000000 	.word	0x20000000
 80002ac:	20000028 	.word	0x20000028

080002b0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80002b0:	4b01      	ldr	r3, [pc, #4]	@ (80002b8 <HAL_GetTick+0x8>)
 80002b2:	6818      	ldr	r0, [r3, #0]
}
 80002b4:	4770      	bx	lr
 80002b6:	46c0      	nop			@ (mov r8, r8)
 80002b8:	20000028 	.word	0x20000028

080002bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80002bc:	b570      	push	{r4, r5, r6, lr}
 80002be:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80002c0:	f7ff fff6 	bl	80002b0 <HAL_GetTick>
 80002c4:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80002c6:	1c63      	adds	r3, r4, #1
 80002c8:	d002      	beq.n	80002d0 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80002ca:	4b04      	ldr	r3, [pc, #16]	@ (80002dc <HAL_Delay+0x20>)
 80002cc:	781b      	ldrb	r3, [r3, #0]
 80002ce:	18e4      	adds	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80002d0:	f7ff ffee 	bl	80002b0 <HAL_GetTick>
 80002d4:	1b40      	subs	r0, r0, r5
 80002d6:	42a0      	cmp	r0, r4
 80002d8:	d3fa      	bcc.n	80002d0 <HAL_Delay+0x14>
  {
  }
}
 80002da:	bd70      	pop	{r4, r5, r6, pc}
 80002dc:	20000000 	.word	0x20000000

080002e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002e0:	b570      	push	{r4, r5, r6, lr}
  if ((int32_t)(IRQn) >= 0)
 80002e2:	2800      	cmp	r0, #0
 80002e4:	db11      	blt.n	800030a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002e6:	0883      	lsrs	r3, r0, #2
 80002e8:	4d13      	ldr	r5, [pc, #76]	@ (8000338 <__NVIC_SetPriority+0x58>)
 80002ea:	33c0      	adds	r3, #192	@ 0xc0
 80002ec:	009b      	lsls	r3, r3, #2
 80002ee:	595c      	ldr	r4, [r3, r5]
 80002f0:	2203      	movs	r2, #3
 80002f2:	4010      	ands	r0, r2
 80002f4:	00c0      	lsls	r0, r0, #3
 80002f6:	32fc      	adds	r2, #252	@ 0xfc
 80002f8:	0016      	movs	r6, r2
 80002fa:	4086      	lsls	r6, r0
 80002fc:	43b4      	bics	r4, r6
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002fe:	0189      	lsls	r1, r1, #6
 8000300:	400a      	ands	r2, r1
 8000302:	4082      	lsls	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000304:	4322      	orrs	r2, r4
 8000306:	515a      	str	r2, [r3, r5]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000308:	bd70      	pop	{r4, r5, r6, pc}
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800030a:	230f      	movs	r3, #15
 800030c:	4003      	ands	r3, r0
 800030e:	3b08      	subs	r3, #8
 8000310:	089b      	lsrs	r3, r3, #2
 8000312:	3306      	adds	r3, #6
 8000314:	009b      	lsls	r3, r3, #2
 8000316:	4a09      	ldr	r2, [pc, #36]	@ (800033c <__NVIC_SetPriority+0x5c>)
 8000318:	4694      	mov	ip, r2
 800031a:	4463      	add	r3, ip
 800031c:	685c      	ldr	r4, [r3, #4]
 800031e:	2203      	movs	r2, #3
 8000320:	4010      	ands	r0, r2
 8000322:	00c0      	lsls	r0, r0, #3
 8000324:	32fc      	adds	r2, #252	@ 0xfc
 8000326:	0015      	movs	r5, r2
 8000328:	4085      	lsls	r5, r0
 800032a:	43ac      	bics	r4, r5
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800032c:	0189      	lsls	r1, r1, #6
 800032e:	400a      	ands	r2, r1
 8000330:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000332:	4322      	orrs	r2, r4
 8000334:	605a      	str	r2, [r3, #4]
}
 8000336:	e7e7      	b.n	8000308 <__NVIC_SetPriority+0x28>
 8000338:	e000e100 	.word	0xe000e100
 800033c:	e000ed00 	.word	0xe000ed00

08000340 <SysTick_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000340:	3801      	subs	r0, #1
 8000342:	2380      	movs	r3, #128	@ 0x80
 8000344:	045b      	lsls	r3, r3, #17
 8000346:	4298      	cmp	r0, r3
 8000348:	d20f      	bcs.n	800036a <SysTick_Config+0x2a>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800034a:	4a09      	ldr	r2, [pc, #36]	@ (8000370 <SysTick_Config+0x30>)
 800034c:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800034e:	4809      	ldr	r0, [pc, #36]	@ (8000374 <SysTick_Config+0x34>)
 8000350:	6a03      	ldr	r3, [r0, #32]
 8000352:	021b      	lsls	r3, r3, #8
 8000354:	0a1b      	lsrs	r3, r3, #8
 8000356:	21c0      	movs	r1, #192	@ 0xc0
 8000358:	0609      	lsls	r1, r1, #24
 800035a:	430b      	orrs	r3, r1
 800035c:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800035e:	2300      	movs	r3, #0
 8000360:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000362:	3307      	adds	r3, #7
 8000364:	6013      	str	r3, [r2, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000366:	2000      	movs	r0, #0
}
 8000368:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800036a:	2001      	movs	r0, #1
 800036c:	e7fc      	b.n	8000368 <SysTick_Config+0x28>
 800036e:	46c0      	nop			@ (mov r8, r8)
 8000370:	e000e010 	.word	0xe000e010
 8000374:	e000ed00 	.word	0xe000ed00

08000378 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000378:	b510      	push	{r4, lr}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800037a:	f7ff ffb1 	bl	80002e0 <__NVIC_SetPriority>
}
 800037e:	bd10      	pop	{r4, pc}

08000380 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000380:	b510      	push	{r4, lr}
  return SysTick_Config(TicksNumb);
 8000382:	f7ff ffdd 	bl	8000340 <SysTick_Config>
}
 8000386:	bd10      	pop	{r4, pc}

08000388 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000388:	6942      	ldr	r2, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800038a:	0013      	movs	r3, r2
 800038c:	400b      	ands	r3, r1
 800038e:	041b      	lsls	r3, r3, #16
 8000390:	4391      	bics	r1, r2
 8000392:	430b      	orrs	r3, r1
 8000394:	6183      	str	r3, [r0, #24]
}
 8000396:	4770      	bx	lr

08000398 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000398:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800039a:	4b0a      	ldr	r3, [pc, #40]	@ (80003c4 <HAL_MspInit+0x2c>)
 800039c:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 800039e:	2201      	movs	r2, #1
 80003a0:	4311      	orrs	r1, r2
 80003a2:	6419      	str	r1, [r3, #64]	@ 0x40
 80003a4:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80003a6:	400a      	ands	r2, r1
 80003a8:	9200      	str	r2, [sp, #0]
 80003aa:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003ac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80003ae:	2180      	movs	r1, #128	@ 0x80
 80003b0:	0549      	lsls	r1, r1, #21
 80003b2:	430a      	orrs	r2, r1
 80003b4:	63da      	str	r2, [r3, #60]	@ 0x3c
 80003b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80003b8:	400b      	ands	r3, r1
 80003ba:	9301      	str	r3, [sp, #4]
 80003bc:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003be:	b002      	add	sp, #8
 80003c0:	4770      	bx	lr
 80003c2:	46c0      	nop			@ (mov r8, r8)
 80003c4:	40021000 	.word	0x40021000

080003c8 <HAL_RCC_OscConfig>:
            must adjust the number of CPU wait states in their application (SystemClock_Config() API)
            before calling the HAL_RCC_OscConfig() API to update the HSI48 clock division factor.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80003c8:	b570      	push	{r4, r5, r6, lr}
 80003ca:	1e04      	subs	r4, r0, #0
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80003cc:	d100      	bne.n	80003d0 <HAL_RCC_OscConfig+0x8>
 80003ce:	e139      	b.n	8000644 <HAL_RCC_OscConfig+0x27c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80003d0:	6803      	ldr	r3, [r0, #0]
 80003d2:	07db      	lsls	r3, r3, #31
 80003d4:	d52c      	bpl.n	8000430 <HAL_RCC_OscConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80003d6:	4ba1      	ldr	r3, [pc, #644]	@ (800065c <HAL_RCC_OscConfig+0x294>)
 80003d8:	689a      	ldr	r2, [r3, #8]
 80003da:	2338      	movs	r3, #56	@ 0x38
 80003dc:	4013      	ands	r3, r2

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 80003de:	2b08      	cmp	r3, #8
 80003e0:	d022      	beq.n	8000428 <HAL_RCC_OscConfig+0x60>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80003e2:	6843      	ldr	r3, [r0, #4]
 80003e4:	2280      	movs	r2, #128	@ 0x80
 80003e6:	0252      	lsls	r2, r2, #9
 80003e8:	4293      	cmp	r3, r2
 80003ea:	d02e      	beq.n	800044a <HAL_RCC_OscConfig+0x82>
 80003ec:	22a0      	movs	r2, #160	@ 0xa0
 80003ee:	02d2      	lsls	r2, r2, #11
 80003f0:	4293      	cmp	r3, r2
 80003f2:	d031      	beq.n	8000458 <HAL_RCC_OscConfig+0x90>
 80003f4:	4b99      	ldr	r3, [pc, #612]	@ (800065c <HAL_RCC_OscConfig+0x294>)
 80003f6:	681a      	ldr	r2, [r3, #0]
 80003f8:	4999      	ldr	r1, [pc, #612]	@ (8000660 <HAL_RCC_OscConfig+0x298>)
 80003fa:	400a      	ands	r2, r1
 80003fc:	601a      	str	r2, [r3, #0]
 80003fe:	681a      	ldr	r2, [r3, #0]
 8000400:	4998      	ldr	r1, [pc, #608]	@ (8000664 <HAL_RCC_OscConfig+0x29c>)
 8000402:	400a      	ands	r2, r1
 8000404:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000406:	6863      	ldr	r3, [r4, #4]
 8000408:	2b00      	cmp	r3, #0
 800040a:	d031      	beq.n	8000470 <HAL_RCC_OscConfig+0xa8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800040c:	f7ff ff50 	bl	80002b0 <HAL_GetTick>
 8000410:	0005      	movs	r5, r0

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000412:	4b92      	ldr	r3, [pc, #584]	@ (800065c <HAL_RCC_OscConfig+0x294>)
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	039b      	lsls	r3, r3, #14
 8000418:	d40a      	bmi.n	8000430 <HAL_RCC_OscConfig+0x68>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 800041a:	f7ff ff49 	bl	80002b0 <HAL_GetTick>
 800041e:	1b40      	subs	r0, r0, r5
 8000420:	2864      	cmp	r0, #100	@ 0x64
 8000422:	d9f6      	bls.n	8000412 <HAL_RCC_OscConfig+0x4a>
          {
            return HAL_TIMEOUT;
 8000424:	2003      	movs	r0, #3
 8000426:	e10e      	b.n	8000646 <HAL_RCC_OscConfig+0x27e>
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8000428:	6843      	ldr	r3, [r0, #4]
 800042a:	2b00      	cmp	r3, #0
 800042c:	d100      	bne.n	8000430 <HAL_RCC_OscConfig+0x68>
 800042e:	e10b      	b.n	8000648 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000430:	6823      	ldr	r3, [r4, #0]
 8000432:	079b      	lsls	r3, r3, #30
 8000434:	d547      	bpl.n	80004c6 <HAL_RCC_OscConfig+0xfe>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000436:	4b89      	ldr	r3, [pc, #548]	@ (800065c <HAL_RCC_OscConfig+0x294>)
 8000438:	689b      	ldr	r3, [r3, #8]
 800043a:	2238      	movs	r2, #56	@ 0x38

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 800043c:	421a      	tst	r2, r3
 800043e:	d161      	bne.n	8000504 <HAL_RCC_OscConfig+0x13c>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8000440:	68e3      	ldr	r3, [r4, #12]
 8000442:	2b00      	cmp	r3, #0
 8000444:	d122      	bne.n	800048c <HAL_RCC_OscConfig+0xc4>
      {
        return HAL_ERROR;
 8000446:	2001      	movs	r0, #1
 8000448:	e0fd      	b.n	8000646 <HAL_RCC_OscConfig+0x27e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800044a:	4a84      	ldr	r2, [pc, #528]	@ (800065c <HAL_RCC_OscConfig+0x294>)
 800044c:	6811      	ldr	r1, [r2, #0]
 800044e:	2380      	movs	r3, #128	@ 0x80
 8000450:	025b      	lsls	r3, r3, #9
 8000452:	430b      	orrs	r3, r1
 8000454:	6013      	str	r3, [r2, #0]
 8000456:	e7d6      	b.n	8000406 <HAL_RCC_OscConfig+0x3e>
 8000458:	4b80      	ldr	r3, [pc, #512]	@ (800065c <HAL_RCC_OscConfig+0x294>)
 800045a:	6819      	ldr	r1, [r3, #0]
 800045c:	2280      	movs	r2, #128	@ 0x80
 800045e:	02d2      	lsls	r2, r2, #11
 8000460:	430a      	orrs	r2, r1
 8000462:	601a      	str	r2, [r3, #0]
 8000464:	6819      	ldr	r1, [r3, #0]
 8000466:	2280      	movs	r2, #128	@ 0x80
 8000468:	0252      	lsls	r2, r2, #9
 800046a:	430a      	orrs	r2, r1
 800046c:	601a      	str	r2, [r3, #0]
 800046e:	e7ca      	b.n	8000406 <HAL_RCC_OscConfig+0x3e>
        tickstart = HAL_GetTick();
 8000470:	f7ff ff1e 	bl	80002b0 <HAL_GetTick>
 8000474:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000476:	4b79      	ldr	r3, [pc, #484]	@ (800065c <HAL_RCC_OscConfig+0x294>)
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	039b      	lsls	r3, r3, #14
 800047c:	d5d8      	bpl.n	8000430 <HAL_RCC_OscConfig+0x68>
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 800047e:	f7ff ff17 	bl	80002b0 <HAL_GetTick>
 8000482:	1b40      	subs	r0, r0, r5
 8000484:	2864      	cmp	r0, #100	@ 0x64
 8000486:	d9f6      	bls.n	8000476 <HAL_RCC_OscConfig+0xae>
            return HAL_TIMEOUT;
 8000488:	2003      	movs	r0, #3
 800048a:	e0dc      	b.n	8000646 <HAL_RCC_OscConfig+0x27e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800048c:	4b73      	ldr	r3, [pc, #460]	@ (800065c <HAL_RCC_OscConfig+0x294>)
 800048e:	685a      	ldr	r2, [r3, #4]
 8000490:	4975      	ldr	r1, [pc, #468]	@ (8000668 <HAL_RCC_OscConfig+0x2a0>)
 8000492:	400a      	ands	r2, r1
 8000494:	6961      	ldr	r1, [r4, #20]
 8000496:	0209      	lsls	r1, r1, #8
 8000498:	430a      	orrs	r2, r1
 800049a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800049c:	681a      	ldr	r2, [r3, #0]
 800049e:	4973      	ldr	r1, [pc, #460]	@ (800066c <HAL_RCC_OscConfig+0x2a4>)
 80004a0:	400a      	ands	r2, r1
 80004a2:	6921      	ldr	r1, [r4, #16]
 80004a4:	430a      	orrs	r2, r1
 80004a6:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	0adb      	lsrs	r3, r3, #11
 80004ac:	2207      	movs	r2, #7
 80004ae:	401a      	ands	r2, r3
 80004b0:	4b6f      	ldr	r3, [pc, #444]	@ (8000670 <HAL_RCC_OscConfig+0x2a8>)
 80004b2:	40d3      	lsrs	r3, r2
 80004b4:	4a6f      	ldr	r2, [pc, #444]	@ (8000674 <HAL_RCC_OscConfig+0x2ac>)
 80004b6:	6013      	str	r3, [r2, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80004b8:	4b6f      	ldr	r3, [pc, #444]	@ (8000678 <HAL_RCC_OscConfig+0x2b0>)
 80004ba:	6818      	ldr	r0, [r3, #0]
 80004bc:	f7ff feb4 	bl	8000228 <HAL_InitTick>
 80004c0:	2800      	cmp	r0, #0
 80004c2:	d000      	beq.n	80004c6 <HAL_RCC_OscConfig+0xfe>
 80004c4:	e0c2      	b.n	800064c <HAL_RCC_OscConfig+0x284>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80004c6:	6823      	ldr	r3, [r4, #0]
 80004c8:	071b      	lsls	r3, r3, #28
 80004ca:	d557      	bpl.n	800057c <HAL_RCC_OscConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80004cc:	4b63      	ldr	r3, [pc, #396]	@ (800065c <HAL_RCC_OscConfig+0x294>)
 80004ce:	689a      	ldr	r2, [r3, #8]
 80004d0:	2338      	movs	r3, #56	@ 0x38
 80004d2:	4013      	ands	r3, r2
 80004d4:	2b18      	cmp	r3, #24
 80004d6:	d04e      	beq.n	8000576 <HAL_RCC_OscConfig+0x1ae>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80004d8:	69a3      	ldr	r3, [r4, #24]
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d077      	beq.n	80005ce <HAL_RCC_OscConfig+0x206>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80004de:	4a5f      	ldr	r2, [pc, #380]	@ (800065c <HAL_RCC_OscConfig+0x294>)
 80004e0:	6e13      	ldr	r3, [r2, #96]	@ 0x60
 80004e2:	2101      	movs	r1, #1
 80004e4:	430b      	orrs	r3, r1
 80004e6:	6613      	str	r3, [r2, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80004e8:	f7ff fee2 	bl	80002b0 <HAL_GetTick>
 80004ec:	0005      	movs	r5, r0

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 80004ee:	4b5b      	ldr	r3, [pc, #364]	@ (800065c <HAL_RCC_OscConfig+0x294>)
 80004f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80004f2:	079b      	lsls	r3, r3, #30
 80004f4:	d442      	bmi.n	800057c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80004f6:	f7ff fedb 	bl	80002b0 <HAL_GetTick>
 80004fa:	1b40      	subs	r0, r0, r5
 80004fc:	2802      	cmp	r0, #2
 80004fe:	d9f6      	bls.n	80004ee <HAL_RCC_OscConfig+0x126>
          {
            return HAL_TIMEOUT;
 8000500:	2003      	movs	r0, #3
 8000502:	e0a0      	b.n	8000646 <HAL_RCC_OscConfig+0x27e>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000504:	68e3      	ldr	r3, [r4, #12]
 8000506:	2b00      	cmp	r3, #0
 8000508:	d022      	beq.n	8000550 <HAL_RCC_OscConfig+0x188>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800050a:	4a54      	ldr	r2, [pc, #336]	@ (800065c <HAL_RCC_OscConfig+0x294>)
 800050c:	6813      	ldr	r3, [r2, #0]
 800050e:	4957      	ldr	r1, [pc, #348]	@ (800066c <HAL_RCC_OscConfig+0x2a4>)
 8000510:	400b      	ands	r3, r1
 8000512:	6921      	ldr	r1, [r4, #16]
 8000514:	430b      	orrs	r3, r1
 8000516:	6013      	str	r3, [r2, #0]
        __HAL_RCC_HSI_ENABLE();
 8000518:	6811      	ldr	r1, [r2, #0]
 800051a:	2380      	movs	r3, #128	@ 0x80
 800051c:	005b      	lsls	r3, r3, #1
 800051e:	430b      	orrs	r3, r1
 8000520:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8000522:	f7ff fec5 	bl	80002b0 <HAL_GetTick>
 8000526:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000528:	4b4c      	ldr	r3, [pc, #304]	@ (800065c <HAL_RCC_OscConfig+0x294>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	055b      	lsls	r3, r3, #21
 800052e:	d406      	bmi.n	800053e <HAL_RCC_OscConfig+0x176>
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8000530:	f7ff febe 	bl	80002b0 <HAL_GetTick>
 8000534:	1b40      	subs	r0, r0, r5
 8000536:	2802      	cmp	r0, #2
 8000538:	d9f6      	bls.n	8000528 <HAL_RCC_OscConfig+0x160>
            return HAL_TIMEOUT;
 800053a:	2003      	movs	r0, #3
 800053c:	e083      	b.n	8000646 <HAL_RCC_OscConfig+0x27e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800053e:	4947      	ldr	r1, [pc, #284]	@ (800065c <HAL_RCC_OscConfig+0x294>)
 8000540:	684b      	ldr	r3, [r1, #4]
 8000542:	4a49      	ldr	r2, [pc, #292]	@ (8000668 <HAL_RCC_OscConfig+0x2a0>)
 8000544:	4013      	ands	r3, r2
 8000546:	6962      	ldr	r2, [r4, #20]
 8000548:	0212      	lsls	r2, r2, #8
 800054a:	4313      	orrs	r3, r2
 800054c:	604b      	str	r3, [r1, #4]
 800054e:	e7ba      	b.n	80004c6 <HAL_RCC_OscConfig+0xfe>
        __HAL_RCC_HSI_DISABLE();
 8000550:	4a42      	ldr	r2, [pc, #264]	@ (800065c <HAL_RCC_OscConfig+0x294>)
 8000552:	6813      	ldr	r3, [r2, #0]
 8000554:	4949      	ldr	r1, [pc, #292]	@ (800067c <HAL_RCC_OscConfig+0x2b4>)
 8000556:	400b      	ands	r3, r1
 8000558:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800055a:	f7ff fea9 	bl	80002b0 <HAL_GetTick>
 800055e:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000560:	4b3e      	ldr	r3, [pc, #248]	@ (800065c <HAL_RCC_OscConfig+0x294>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	055b      	lsls	r3, r3, #21
 8000566:	d5ae      	bpl.n	80004c6 <HAL_RCC_OscConfig+0xfe>
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8000568:	f7ff fea2 	bl	80002b0 <HAL_GetTick>
 800056c:	1b40      	subs	r0, r0, r5
 800056e:	2802      	cmp	r0, #2
 8000570:	d9f6      	bls.n	8000560 <HAL_RCC_OscConfig+0x198>
            return HAL_TIMEOUT;
 8000572:	2003      	movs	r0, #3
 8000574:	e067      	b.n	8000646 <HAL_RCC_OscConfig+0x27e>
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 8000576:	69a3      	ldr	r3, [r4, #24]
 8000578:	2b00      	cmp	r3, #0
 800057a:	d069      	beq.n	8000650 <HAL_RCC_OscConfig+0x288>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800057c:	6823      	ldr	r3, [r4, #0]
 800057e:	075b      	lsls	r3, r3, #29
 8000580:	d568      	bpl.n	8000654 <HAL_RCC_OscConfig+0x28c>

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8000582:	4b36      	ldr	r3, [pc, #216]	@ (800065c <HAL_RCC_OscConfig+0x294>)
 8000584:	689a      	ldr	r2, [r3, #8]
 8000586:	2338      	movs	r3, #56	@ 0x38
 8000588:	4013      	ands	r3, r2
 800058a:	2b20      	cmp	r3, #32
 800058c:	d032      	beq.n	80005f4 <HAL_RCC_OscConfig+0x22c>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800058e:	68a3      	ldr	r3, [r4, #8]
 8000590:	2b01      	cmp	r3, #1
 8000592:	d034      	beq.n	80005fe <HAL_RCC_OscConfig+0x236>
 8000594:	2b05      	cmp	r3, #5
 8000596:	d038      	beq.n	800060a <HAL_RCC_OscConfig+0x242>
 8000598:	4b30      	ldr	r3, [pc, #192]	@ (800065c <HAL_RCC_OscConfig+0x294>)
 800059a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800059c:	2101      	movs	r1, #1
 800059e:	438a      	bics	r2, r1
 80005a0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80005a2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80005a4:	3103      	adds	r1, #3
 80005a6:	438a      	bics	r2, r1
 80005a8:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80005aa:	68a3      	ldr	r3, [r4, #8]
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d038      	beq.n	8000622 <HAL_RCC_OscConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80005b0:	f7ff fe7e 	bl	80002b0 <HAL_GetTick>
 80005b4:	0004      	movs	r4, r0

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80005b6:	4b29      	ldr	r3, [pc, #164]	@ (800065c <HAL_RCC_OscConfig+0x294>)
 80005b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80005ba:	079b      	lsls	r3, r3, #30
 80005bc:	d42f      	bmi.n	800061e <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80005be:	f7ff fe77 	bl	80002b0 <HAL_GetTick>
 80005c2:	1b00      	subs	r0, r0, r4
 80005c4:	4b2e      	ldr	r3, [pc, #184]	@ (8000680 <HAL_RCC_OscConfig+0x2b8>)
 80005c6:	4298      	cmp	r0, r3
 80005c8:	d9f5      	bls.n	80005b6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80005ca:	2003      	movs	r0, #3
 80005cc:	e03b      	b.n	8000646 <HAL_RCC_OscConfig+0x27e>
        __HAL_RCC_LSI_DISABLE();
 80005ce:	4a23      	ldr	r2, [pc, #140]	@ (800065c <HAL_RCC_OscConfig+0x294>)
 80005d0:	6e13      	ldr	r3, [r2, #96]	@ 0x60
 80005d2:	2101      	movs	r1, #1
 80005d4:	438b      	bics	r3, r1
 80005d6:	6613      	str	r3, [r2, #96]	@ 0x60
        tickstart = HAL_GetTick();
 80005d8:	f7ff fe6a 	bl	80002b0 <HAL_GetTick>
 80005dc:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 80005de:	4b1f      	ldr	r3, [pc, #124]	@ (800065c <HAL_RCC_OscConfig+0x294>)
 80005e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80005e2:	079b      	lsls	r3, r3, #30
 80005e4:	d5ca      	bpl.n	800057c <HAL_RCC_OscConfig+0x1b4>
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80005e6:	f7ff fe63 	bl	80002b0 <HAL_GetTick>
 80005ea:	1b40      	subs	r0, r0, r5
 80005ec:	2802      	cmp	r0, #2
 80005ee:	d9f6      	bls.n	80005de <HAL_RCC_OscConfig+0x216>
            return HAL_TIMEOUT;
 80005f0:	2003      	movs	r0, #3
 80005f2:	e028      	b.n	8000646 <HAL_RCC_OscConfig+0x27e>
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 80005f4:	68a3      	ldr	r3, [r4, #8]
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d02e      	beq.n	8000658 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
#endif /* RCC_CR_HSIUSB48ON */
  return HAL_OK;
 80005fa:	2000      	movs	r0, #0
 80005fc:	e023      	b.n	8000646 <HAL_RCC_OscConfig+0x27e>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80005fe:	4a17      	ldr	r2, [pc, #92]	@ (800065c <HAL_RCC_OscConfig+0x294>)
 8000600:	6dd3      	ldr	r3, [r2, #92]	@ 0x5c
 8000602:	2101      	movs	r1, #1
 8000604:	430b      	orrs	r3, r1
 8000606:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8000608:	e7cf      	b.n	80005aa <HAL_RCC_OscConfig+0x1e2>
 800060a:	4b14      	ldr	r3, [pc, #80]	@ (800065c <HAL_RCC_OscConfig+0x294>)
 800060c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800060e:	2104      	movs	r1, #4
 8000610:	430a      	orrs	r2, r1
 8000612:	65da      	str	r2, [r3, #92]	@ 0x5c
 8000614:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8000616:	3903      	subs	r1, #3
 8000618:	430a      	orrs	r2, r1
 800061a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800061c:	e7c5      	b.n	80005aa <HAL_RCC_OscConfig+0x1e2>
  return HAL_OK;
 800061e:	2000      	movs	r0, #0
 8000620:	e011      	b.n	8000646 <HAL_RCC_OscConfig+0x27e>
        tickstart = HAL_GetTick();
 8000622:	f7ff fe45 	bl	80002b0 <HAL_GetTick>
 8000626:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8000628:	4b0c      	ldr	r3, [pc, #48]	@ (800065c <HAL_RCC_OscConfig+0x294>)
 800062a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800062c:	079b      	lsls	r3, r3, #30
 800062e:	d507      	bpl.n	8000640 <HAL_RCC_OscConfig+0x278>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000630:	f7ff fe3e 	bl	80002b0 <HAL_GetTick>
 8000634:	1b00      	subs	r0, r0, r4
 8000636:	4b12      	ldr	r3, [pc, #72]	@ (8000680 <HAL_RCC_OscConfig+0x2b8>)
 8000638:	4298      	cmp	r0, r3
 800063a:	d9f5      	bls.n	8000628 <HAL_RCC_OscConfig+0x260>
            return HAL_TIMEOUT;
 800063c:	2003      	movs	r0, #3
 800063e:	e002      	b.n	8000646 <HAL_RCC_OscConfig+0x27e>
  return HAL_OK;
 8000640:	2000      	movs	r0, #0
 8000642:	e000      	b.n	8000646 <HAL_RCC_OscConfig+0x27e>
    return HAL_ERROR;
 8000644:	2001      	movs	r0, #1
}
 8000646:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8000648:	2001      	movs	r0, #1
 800064a:	e7fc      	b.n	8000646 <HAL_RCC_OscConfig+0x27e>
          return HAL_ERROR;
 800064c:	2001      	movs	r0, #1
 800064e:	e7fa      	b.n	8000646 <HAL_RCC_OscConfig+0x27e>
        return HAL_ERROR;
 8000650:	2001      	movs	r0, #1
 8000652:	e7f8      	b.n	8000646 <HAL_RCC_OscConfig+0x27e>
  return HAL_OK;
 8000654:	2000      	movs	r0, #0
 8000656:	e7f6      	b.n	8000646 <HAL_RCC_OscConfig+0x27e>
        return HAL_ERROR;
 8000658:	2001      	movs	r0, #1
 800065a:	e7f4      	b.n	8000646 <HAL_RCC_OscConfig+0x27e>
 800065c:	40021000 	.word	0x40021000
 8000660:	fffeffff 	.word	0xfffeffff
 8000664:	fffbffff 	.word	0xfffbffff
 8000668:	ffff80ff 	.word	0xffff80ff
 800066c:	ffffc7ff 	.word	0xffffc7ff
 8000670:	02dc6c00 	.word	0x02dc6c00
 8000674:	20000008 	.word	0x20000008
 8000678:	20000004 	.word	0x20000004
 800067c:	fffffeff 	.word	0xfffffeff
 8000680:	00001388 	.word	0x00001388

08000684 <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq;
#if defined(RCC_CR_SYSDIV)
  uint32_t sysclockdiv = (uint32_t)(((RCC->CR & RCC_CR_SYSDIV) >> RCC_CR_SYSDIV_Pos) + 1U);
#endif /* RCC_CR_SYSDIV */

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8000684:	4b14      	ldr	r3, [pc, #80]	@ (80006d8 <HAL_RCC_GetSysClockFreq+0x54>)
 8000686:	689b      	ldr	r3, [r3, #8]
 8000688:	2238      	movs	r2, #56	@ 0x38
 800068a:	421a      	tst	r2, r3
 800068c:	d107      	bne.n	800069e <HAL_RCC_GetSysClockFreq+0x1a>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800068e:	4b12      	ldr	r3, [pc, #72]	@ (80006d8 <HAL_RCC_GetSysClockFreq+0x54>)
 8000690:	681a      	ldr	r2, [r3, #0]
 8000692:	0ad2      	lsrs	r2, r2, #11
 8000694:	2307      	movs	r3, #7
 8000696:	4013      	ands	r3, r2

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8000698:	4810      	ldr	r0, [pc, #64]	@ (80006dc <HAL_RCC_GetSysClockFreq+0x58>)
 800069a:	40d8      	lsrs	r0, r3
  }
#if defined(RCC_CR_SYSDIV)
  sysclockfreq = sysclockfreq / sysclockdiv;
#endif /* RCC_CR_SYSDIV */
  return sysclockfreq;
}
 800069c:	4770      	bx	lr
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800069e:	4b0e      	ldr	r3, [pc, #56]	@ (80006d8 <HAL_RCC_GetSysClockFreq+0x54>)
 80006a0:	689a      	ldr	r2, [r3, #8]
 80006a2:	2338      	movs	r3, #56	@ 0x38
 80006a4:	4013      	ands	r3, r2
 80006a6:	2b08      	cmp	r3, #8
 80006a8:	d010      	beq.n	80006cc <HAL_RCC_GetSysClockFreq+0x48>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 80006aa:	4b0b      	ldr	r3, [pc, #44]	@ (80006d8 <HAL_RCC_GetSysClockFreq+0x54>)
 80006ac:	689a      	ldr	r2, [r3, #8]
 80006ae:	2338      	movs	r3, #56	@ 0x38
 80006b0:	4013      	ands	r3, r2
 80006b2:	2b20      	cmp	r3, #32
 80006b4:	d00c      	beq.n	80006d0 <HAL_RCC_GetSysClockFreq+0x4c>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80006b6:	4b08      	ldr	r3, [pc, #32]	@ (80006d8 <HAL_RCC_GetSysClockFreq+0x54>)
 80006b8:	689a      	ldr	r2, [r3, #8]
 80006ba:	2338      	movs	r3, #56	@ 0x38
 80006bc:	4013      	ands	r3, r2
 80006be:	2b18      	cmp	r3, #24
 80006c0:	d001      	beq.n	80006c6 <HAL_RCC_GetSysClockFreq+0x42>
    sysclockfreq = 0U;
 80006c2:	2000      	movs	r0, #0
  return sysclockfreq;
 80006c4:	e7ea      	b.n	800069c <HAL_RCC_GetSysClockFreq+0x18>
    sysclockfreq = LSI_VALUE;
 80006c6:	20fa      	movs	r0, #250	@ 0xfa
 80006c8:	01c0      	lsls	r0, r0, #7
 80006ca:	e7e7      	b.n	800069c <HAL_RCC_GetSysClockFreq+0x18>
    sysclockfreq = HSE_VALUE;
 80006cc:	4804      	ldr	r0, [pc, #16]	@ (80006e0 <HAL_RCC_GetSysClockFreq+0x5c>)
 80006ce:	e7e5      	b.n	800069c <HAL_RCC_GetSysClockFreq+0x18>
    sysclockfreq = LSE_VALUE;
 80006d0:	2080      	movs	r0, #128	@ 0x80
 80006d2:	0200      	lsls	r0, r0, #8
 80006d4:	e7e2      	b.n	800069c <HAL_RCC_GetSysClockFreq+0x18>
 80006d6:	46c0      	nop			@ (mov r8, r8)
 80006d8:	40021000 	.word	0x40021000
 80006dc:	02dc6c00 	.word	0x02dc6c00
 80006e0:	007a1200 	.word	0x007a1200

080006e4 <HAL_RCC_ClockConfig>:
{
 80006e4:	b570      	push	{r4, r5, r6, lr}
 80006e6:	0004      	movs	r4, r0
 80006e8:	000d      	movs	r5, r1
  if (RCC_ClkInitStruct == NULL)
 80006ea:	2800      	cmp	r0, #0
 80006ec:	d100      	bne.n	80006f0 <HAL_RCC_ClockConfig+0xc>
 80006ee:	e0a4      	b.n	800083a <HAL_RCC_ClockConfig+0x156>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80006f0:	4b54      	ldr	r3, [pc, #336]	@ (8000844 <HAL_RCC_ClockConfig+0x160>)
 80006f2:	681a      	ldr	r2, [r3, #0]
 80006f4:	2307      	movs	r3, #7
 80006f6:	4013      	ands	r3, r2
 80006f8:	428b      	cmp	r3, r1
 80006fa:	d321      	bcc.n	8000740 <HAL_RCC_ClockConfig+0x5c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80006fc:	6823      	ldr	r3, [r4, #0]
 80006fe:	079a      	lsls	r2, r3, #30
 8000700:	d510      	bpl.n	8000724 <HAL_RCC_ClockConfig+0x40>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000702:	075b      	lsls	r3, r3, #29
 8000704:	d507      	bpl.n	8000716 <HAL_RCC_ClockConfig+0x32>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8000706:	4950      	ldr	r1, [pc, #320]	@ (8000848 <HAL_RCC_ClockConfig+0x164>)
 8000708:	688a      	ldr	r2, [r1, #8]
 800070a:	4b50      	ldr	r3, [pc, #320]	@ (800084c <HAL_RCC_ClockConfig+0x168>)
 800070c:	401a      	ands	r2, r3
 800070e:	23b0      	movs	r3, #176	@ 0xb0
 8000710:	011b      	lsls	r3, r3, #4
 8000712:	4313      	orrs	r3, r2
 8000714:	608b      	str	r3, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000716:	4a4c      	ldr	r2, [pc, #304]	@ (8000848 <HAL_RCC_ClockConfig+0x164>)
 8000718:	6893      	ldr	r3, [r2, #8]
 800071a:	494d      	ldr	r1, [pc, #308]	@ (8000850 <HAL_RCC_ClockConfig+0x16c>)
 800071c:	400b      	ands	r3, r1
 800071e:	68e1      	ldr	r1, [r4, #12]
 8000720:	430b      	orrs	r3, r1
 8000722:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000724:	6823      	ldr	r3, [r4, #0]
 8000726:	07db      	lsls	r3, r3, #31
 8000728:	d54c      	bpl.n	80007c4 <HAL_RCC_ClockConfig+0xe0>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800072a:	6863      	ldr	r3, [r4, #4]
 800072c:	2b01      	cmp	r3, #1
 800072e:	d01e      	beq.n	800076e <HAL_RCC_ClockConfig+0x8a>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8000730:	2b00      	cmp	r3, #0
 8000732:	d139      	bne.n	80007a8 <HAL_RCC_ClockConfig+0xc4>
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000734:	4a44      	ldr	r2, [pc, #272]	@ (8000848 <HAL_RCC_ClockConfig+0x164>)
 8000736:	6812      	ldr	r2, [r2, #0]
 8000738:	0552      	lsls	r2, r2, #21
 800073a:	d41c      	bmi.n	8000776 <HAL_RCC_ClockConfig+0x92>
        return HAL_ERROR;
 800073c:	2001      	movs	r0, #1
 800073e:	e064      	b.n	800080a <HAL_RCC_ClockConfig+0x126>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000740:	4a40      	ldr	r2, [pc, #256]	@ (8000844 <HAL_RCC_ClockConfig+0x160>)
 8000742:	6813      	ldr	r3, [r2, #0]
 8000744:	2107      	movs	r1, #7
 8000746:	438b      	bics	r3, r1
 8000748:	432b      	orrs	r3, r5
 800074a:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800074c:	f7ff fdb0 	bl	80002b0 <HAL_GetTick>
 8000750:	0006      	movs	r6, r0
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000752:	4b3c      	ldr	r3, [pc, #240]	@ (8000844 <HAL_RCC_ClockConfig+0x160>)
 8000754:	681a      	ldr	r2, [r3, #0]
 8000756:	2307      	movs	r3, #7
 8000758:	4013      	ands	r3, r2
 800075a:	42ab      	cmp	r3, r5
 800075c:	d0ce      	beq.n	80006fc <HAL_RCC_ClockConfig+0x18>
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800075e:	f7ff fda7 	bl	80002b0 <HAL_GetTick>
 8000762:	1b80      	subs	r0, r0, r6
 8000764:	4a3b      	ldr	r2, [pc, #236]	@ (8000854 <HAL_RCC_ClockConfig+0x170>)
 8000766:	4290      	cmp	r0, r2
 8000768:	d9f3      	bls.n	8000752 <HAL_RCC_ClockConfig+0x6e>
        return HAL_TIMEOUT;
 800076a:	2003      	movs	r0, #3
 800076c:	e04d      	b.n	800080a <HAL_RCC_ClockConfig+0x126>
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800076e:	4a36      	ldr	r2, [pc, #216]	@ (8000848 <HAL_RCC_ClockConfig+0x164>)
 8000770:	6812      	ldr	r2, [r2, #0]
 8000772:	0392      	lsls	r2, r2, #14
 8000774:	d563      	bpl.n	800083e <HAL_RCC_ClockConfig+0x15a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8000776:	4934      	ldr	r1, [pc, #208]	@ (8000848 <HAL_RCC_ClockConfig+0x164>)
 8000778:	688a      	ldr	r2, [r1, #8]
 800077a:	2007      	movs	r0, #7
 800077c:	4382      	bics	r2, r0
 800077e:	4313      	orrs	r3, r2
 8000780:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8000782:	f7ff fd95 	bl	80002b0 <HAL_GetTick>
 8000786:	0006      	movs	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000788:	4b2f      	ldr	r3, [pc, #188]	@ (8000848 <HAL_RCC_ClockConfig+0x164>)
 800078a:	689b      	ldr	r3, [r3, #8]
 800078c:	2238      	movs	r2, #56	@ 0x38
 800078e:	401a      	ands	r2, r3
 8000790:	6863      	ldr	r3, [r4, #4]
 8000792:	00db      	lsls	r3, r3, #3
 8000794:	429a      	cmp	r2, r3
 8000796:	d015      	beq.n	80007c4 <HAL_RCC_ClockConfig+0xe0>
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8000798:	f7ff fd8a 	bl	80002b0 <HAL_GetTick>
 800079c:	1b80      	subs	r0, r0, r6
 800079e:	4b2d      	ldr	r3, [pc, #180]	@ (8000854 <HAL_RCC_ClockConfig+0x170>)
 80007a0:	4298      	cmp	r0, r3
 80007a2:	d9f1      	bls.n	8000788 <HAL_RCC_ClockConfig+0xa4>
        return HAL_TIMEOUT;
 80007a4:	2003      	movs	r0, #3
 80007a6:	e030      	b.n	800080a <HAL_RCC_ClockConfig+0x126>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80007a8:	2b03      	cmp	r3, #3
 80007aa:	d005      	beq.n	80007b8 <HAL_RCC_ClockConfig+0xd4>
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80007ac:	4a26      	ldr	r2, [pc, #152]	@ (8000848 <HAL_RCC_ClockConfig+0x164>)
 80007ae:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80007b0:	0792      	lsls	r2, r2, #30
 80007b2:	d4e0      	bmi.n	8000776 <HAL_RCC_ClockConfig+0x92>
        return HAL_ERROR;
 80007b4:	2001      	movs	r0, #1
 80007b6:	e028      	b.n	800080a <HAL_RCC_ClockConfig+0x126>
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 80007b8:	4a23      	ldr	r2, [pc, #140]	@ (8000848 <HAL_RCC_ClockConfig+0x164>)
 80007ba:	6e12      	ldr	r2, [r2, #96]	@ 0x60
 80007bc:	0792      	lsls	r2, r2, #30
 80007be:	d4da      	bmi.n	8000776 <HAL_RCC_ClockConfig+0x92>
        return HAL_ERROR;
 80007c0:	2001      	movs	r0, #1
 80007c2:	e022      	b.n	800080a <HAL_RCC_ClockConfig+0x126>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80007c4:	4b1f      	ldr	r3, [pc, #124]	@ (8000844 <HAL_RCC_ClockConfig+0x160>)
 80007c6:	681a      	ldr	r2, [r3, #0]
 80007c8:	2307      	movs	r3, #7
 80007ca:	4013      	ands	r3, r2
 80007cc:	42ab      	cmp	r3, r5
 80007ce:	d81d      	bhi.n	800080c <HAL_RCC_ClockConfig+0x128>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80007d0:	6823      	ldr	r3, [r4, #0]
 80007d2:	075b      	lsls	r3, r3, #29
 80007d4:	d506      	bpl.n	80007e4 <HAL_RCC_ClockConfig+0x100>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80007d6:	4a1c      	ldr	r2, [pc, #112]	@ (8000848 <HAL_RCC_ClockConfig+0x164>)
 80007d8:	6893      	ldr	r3, [r2, #8]
 80007da:	491f      	ldr	r1, [pc, #124]	@ (8000858 <HAL_RCC_ClockConfig+0x174>)
 80007dc:	400b      	ands	r3, r1
 80007de:	6921      	ldr	r1, [r4, #16]
 80007e0:	430b      	orrs	r3, r1
 80007e2:	6093      	str	r3, [r2, #8]
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 80007e4:	f7ff ff4e 	bl	8000684 <HAL_RCC_GetSysClockFreq>
 80007e8:	4b17      	ldr	r3, [pc, #92]	@ (8000848 <HAL_RCC_ClockConfig+0x164>)
 80007ea:	689a      	ldr	r2, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80007ec:	0a12      	lsrs	r2, r2, #8
 80007ee:	230f      	movs	r3, #15
 80007f0:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 80007f2:	4a1a      	ldr	r2, [pc, #104]	@ (800085c <HAL_RCC_ClockConfig+0x178>)
 80007f4:	009b      	lsls	r3, r3, #2
 80007f6:	589a      	ldr	r2, [r3, r2]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80007f8:	231f      	movs	r3, #31
 80007fa:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 80007fc:	40d8      	lsrs	r0, r3
 80007fe:	4b18      	ldr	r3, [pc, #96]	@ (8000860 <HAL_RCC_ClockConfig+0x17c>)
 8000800:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 8000802:	4b18      	ldr	r3, [pc, #96]	@ (8000864 <HAL_RCC_ClockConfig+0x180>)
 8000804:	6818      	ldr	r0, [r3, #0]
 8000806:	f7ff fd0f 	bl	8000228 <HAL_InitTick>
}
 800080a:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 800080c:	4a0d      	ldr	r2, [pc, #52]	@ (8000844 <HAL_RCC_ClockConfig+0x160>)
 800080e:	6813      	ldr	r3, [r2, #0]
 8000810:	2107      	movs	r1, #7
 8000812:	438b      	bics	r3, r1
 8000814:	432b      	orrs	r3, r5
 8000816:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8000818:	f7ff fd4a 	bl	80002b0 <HAL_GetTick>
 800081c:	0006      	movs	r6, r0
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800081e:	4b09      	ldr	r3, [pc, #36]	@ (8000844 <HAL_RCC_ClockConfig+0x160>)
 8000820:	681a      	ldr	r2, [r3, #0]
 8000822:	2307      	movs	r3, #7
 8000824:	4013      	ands	r3, r2
 8000826:	42ab      	cmp	r3, r5
 8000828:	d0d2      	beq.n	80007d0 <HAL_RCC_ClockConfig+0xec>
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800082a:	f7ff fd41 	bl	80002b0 <HAL_GetTick>
 800082e:	1b80      	subs	r0, r0, r6
 8000830:	4b08      	ldr	r3, [pc, #32]	@ (8000854 <HAL_RCC_ClockConfig+0x170>)
 8000832:	4298      	cmp	r0, r3
 8000834:	d9f3      	bls.n	800081e <HAL_RCC_ClockConfig+0x13a>
        return HAL_TIMEOUT;
 8000836:	2003      	movs	r0, #3
 8000838:	e7e7      	b.n	800080a <HAL_RCC_ClockConfig+0x126>
    return HAL_ERROR;
 800083a:	2001      	movs	r0, #1
 800083c:	e7e5      	b.n	800080a <HAL_RCC_ClockConfig+0x126>
        return HAL_ERROR;
 800083e:	2001      	movs	r0, #1
 8000840:	e7e3      	b.n	800080a <HAL_RCC_ClockConfig+0x126>
 8000842:	46c0      	nop			@ (mov r8, r8)
 8000844:	40022000 	.word	0x40022000
 8000848:	40021000 	.word	0x40021000
 800084c:	ffff84ff 	.word	0xffff84ff
 8000850:	fffff0ff 	.word	0xfffff0ff
 8000854:	00001388 	.word	0x00001388
 8000858:	ffff8fff 	.word	0xffff8fff
 800085c:	0800094c 	.word	0x0800094c
 8000860:	20000008 	.word	0x20000008
 8000864:	20000004 	.word	0x20000004

08000868 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000868:	e7fe      	b.n	8000868 <NMI_Handler>

0800086a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800086a:	e7fe      	b.n	800086a <HardFault_Handler>

0800086c <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800086c:	4770      	bx	lr

0800086e <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800086e:	4770      	bx	lr

08000870 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000870:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000872:	f7ff fd11 	bl	8000298 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000876:	bd10      	pop	{r4, pc}

08000878 <SystemInit>:
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000878:	4b02      	ldr	r3, [pc, #8]	@ (8000884 <SystemInit+0xc>)
 800087a:	2280      	movs	r2, #128	@ 0x80
 800087c:	0512      	lsls	r2, r2, #20
 800087e:	609a      	str	r2, [r3, #8]
#endif
}
 8000880:	4770      	bx	lr
 8000882:	46c0      	nop			@ (mov r8, r8)
 8000884:	e000ed00 	.word	0xe000ed00

08000888 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000888:	480d      	ldr	r0, [pc, #52]	@ (80008c0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800088a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800088c:	f7ff fff4 	bl	8000878 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000890:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000892:	e003      	b.n	800089c <LoopCopyDataInit>

08000894 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000894:	4b0b      	ldr	r3, [pc, #44]	@ (80008c4 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8000896:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000898:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800089a:	3104      	adds	r1, #4

0800089c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800089c:	480a      	ldr	r0, [pc, #40]	@ (80008c8 <LoopForever+0xa>)
  ldr r3, =_edata
 800089e:	4b0b      	ldr	r3, [pc, #44]	@ (80008cc <LoopForever+0xe>)
  adds r2, r0, r1
 80008a0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80008a2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80008a4:	d3f6      	bcc.n	8000894 <CopyDataInit>
  ldr r2, =_sbss
 80008a6:	4a0a      	ldr	r2, [pc, #40]	@ (80008d0 <LoopForever+0x12>)
  b LoopFillZerobss
 80008a8:	e002      	b.n	80008b0 <LoopFillZerobss>

080008aa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80008aa:	2300      	movs	r3, #0
  str  r3, [r2]
 80008ac:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008ae:	3204      	adds	r2, #4

080008b0 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 80008b0:	4b08      	ldr	r3, [pc, #32]	@ (80008d4 <LoopForever+0x16>)
  cmp r2, r3
 80008b2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80008b4:	d3f9      	bcc.n	80008aa <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 80008b6:	f000 f819 	bl	80008ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008ba:	f7ff fca5 	bl	8000208 <main>

080008be <LoopForever>:

LoopForever:
    b LoopForever
 80008be:	e7fe      	b.n	80008be <LoopForever>
  ldr   r0, =_estack
 80008c0:	20003000 	.word	0x20003000
  ldr r3, =_sidata
 80008c4:	08000994 	.word	0x08000994
  ldr r0, =_sdata
 80008c8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80008cc:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 80008d0:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 80008d4:	2000002c 	.word	0x2000002c

080008d8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008d8:	e7fe      	b.n	80008d8 <ADC1_IRQHandler>

080008da <memset>:
 80008da:	0003      	movs	r3, r0
 80008dc:	1882      	adds	r2, r0, r2
 80008de:	4293      	cmp	r3, r2
 80008e0:	d100      	bne.n	80008e4 <memset+0xa>
 80008e2:	4770      	bx	lr
 80008e4:	7019      	strb	r1, [r3, #0]
 80008e6:	3301      	adds	r3, #1
 80008e8:	e7f9      	b.n	80008de <memset+0x4>
	...

080008ec <__libc_init_array>:
 80008ec:	b570      	push	{r4, r5, r6, lr}
 80008ee:	2600      	movs	r6, #0
 80008f0:	4c0c      	ldr	r4, [pc, #48]	@ (8000924 <__libc_init_array+0x38>)
 80008f2:	4d0d      	ldr	r5, [pc, #52]	@ (8000928 <__libc_init_array+0x3c>)
 80008f4:	1b64      	subs	r4, r4, r5
 80008f6:	10a4      	asrs	r4, r4, #2
 80008f8:	42a6      	cmp	r6, r4
 80008fa:	d109      	bne.n	8000910 <__libc_init_array+0x24>
 80008fc:	2600      	movs	r6, #0
 80008fe:	f000 f819 	bl	8000934 <_init>
 8000902:	4c0a      	ldr	r4, [pc, #40]	@ (800092c <__libc_init_array+0x40>)
 8000904:	4d0a      	ldr	r5, [pc, #40]	@ (8000930 <__libc_init_array+0x44>)
 8000906:	1b64      	subs	r4, r4, r5
 8000908:	10a4      	asrs	r4, r4, #2
 800090a:	42a6      	cmp	r6, r4
 800090c:	d105      	bne.n	800091a <__libc_init_array+0x2e>
 800090e:	bd70      	pop	{r4, r5, r6, pc}
 8000910:	00b3      	lsls	r3, r6, #2
 8000912:	58eb      	ldr	r3, [r5, r3]
 8000914:	4798      	blx	r3
 8000916:	3601      	adds	r6, #1
 8000918:	e7ee      	b.n	80008f8 <__libc_init_array+0xc>
 800091a:	00b3      	lsls	r3, r6, #2
 800091c:	58eb      	ldr	r3, [r5, r3]
 800091e:	4798      	blx	r3
 8000920:	3601      	adds	r6, #1
 8000922:	e7f2      	b.n	800090a <__libc_init_array+0x1e>
 8000924:	0800098c 	.word	0x0800098c
 8000928:	0800098c 	.word	0x0800098c
 800092c:	08000990 	.word	0x08000990
 8000930:	0800098c 	.word	0x0800098c

08000934 <_init>:
 8000934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000936:	46c0      	nop			@ (mov r8, r8)
 8000938:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800093a:	bc08      	pop	{r3}
 800093c:	469e      	mov	lr, r3
 800093e:	4770      	bx	lr

08000940 <_fini>:
 8000940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000942:	46c0      	nop			@ (mov r8, r8)
 8000944:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000946:	bc08      	pop	{r3}
 8000948:	469e      	mov	lr, r3
 800094a:	4770      	bx	lr
